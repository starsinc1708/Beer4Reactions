// <auto-generated />
using System;
using Beer4Reactions.BotLogic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Beer4Reactions.BotLogic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828215409_UpdateModelTypes")]
    partial class UpdateModelTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.MediaGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MediaGroupId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("MediaGroupId", "ChatId")
                        .IsUnique();

                    b.ToTable("MediaGroups");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.MonthlyStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int?>("TopMediaGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("TopMediaGroupReactionCount")
                        .HasColumnType("integer");

                    b.Property<int?>("TopPhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("TopPhotoReactionCount")
                        .HasColumnType("integer");

                    b.Property<string>("TopReactionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TopReactionUsageCount")
                        .HasColumnType("integer");

                    b.Property<int?>("TopUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TopUserReactionCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalActiveUsers")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMediaGroups")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPhotos")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReactions")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TopMediaGroupId");

                    b.HasIndex("TopPhotoId");

                    b.HasIndex("TopUserId");

                    b.HasIndex("ChatId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("MonthlyStatistics");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUniqueId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int?>("MediaGroupId")
                        .HasColumnType("integer");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MediaGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex("ChatId", "MessageId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MediaGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MediaGroupId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserId", "PhotoId", "MediaGroupId", "Type")
                        .IsUnique();

                    b.ToTable("Reactions", t =>
                        {
                            t.HasCheckConstraint("CK_Reaction_Target", "(\"PhotoId\" IS NOT NULL AND \"MediaGroupId\" IS NULL) OR (\"PhotoId\" IS NULL AND \"MediaGroupId\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.TopMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastMessageContent")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatisticsPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StatisticsPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatId", "IsActive");

                    b.ToTable("TopMessages");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastActiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("TelegramUserId", "ChatId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.MonthlyStatistic", b =>
                {
                    b.HasOne("Beer4Reactions.BotLogic.Models.MediaGroup", "TopMediaGroup")
                        .WithMany()
                        .HasForeignKey("TopMediaGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Beer4Reactions.BotLogic.Models.Photo", "TopPhoto")
                        .WithMany()
                        .HasForeignKey("TopPhotoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Beer4Reactions.BotLogic.Models.User", "TopUser")
                        .WithMany()
                        .HasForeignKey("TopUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TopMediaGroup");

                    b.Navigation("TopPhoto");

                    b.Navigation("TopUser");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.Photo", b =>
                {
                    b.HasOne("Beer4Reactions.BotLogic.Models.MediaGroup", "MediaGroup")
                        .WithMany("Photos")
                        .HasForeignKey("MediaGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Beer4Reactions.BotLogic.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.Reaction", b =>
                {
                    b.HasOne("Beer4Reactions.BotLogic.Models.MediaGroup", "MediaGroup")
                        .WithMany("GroupReactions")
                        .HasForeignKey("MediaGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Beer4Reactions.BotLogic.Models.Photo", "Photo")
                        .WithMany("Reactions")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Beer4Reactions.BotLogic.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaGroup");

                    b.Navigation("Photo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.MediaGroup", b =>
                {
                    b.Navigation("GroupReactions");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.Photo", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Beer4Reactions.BotLogic.Models.User", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
